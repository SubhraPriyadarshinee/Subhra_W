{"version":3,"file":"static/js/284.78cb53e9.chunk.js","mappings":"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","sources":["components/common/bottom-card/bottom-card.styles.ts","components/common/bottom-card/bottom-card.tsx","components/common/sub-header/sub-header.tsx","components/global-keyboard/gobal-keyboard.tsx","components/global-keyboard/useGlobalKeyboard.tsx","components/scan-tcl/scan-tcl.tsx","../node_modules/@mui/icons-material/ArrowBack.js"],"sourcesContent":["export const styles = {\n  bottomSpace: {\n    borderTop: \"1px solid lightgray\",\n    m: 2,\n    pb: 10,\n  },\n  chip: {\n    borderRadius: 0,\n    left: 16,\n    position: \"absolute\",\n    top: 16,\n  },\n  wrapper: {\n    alignItems: \"center\",\n    display: \"flex\",\n    height: 50,\n    justifyContent: \"center\",\n    position: \"relative\",\n  },\n  center: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n};\n","import Box from \"@mui/material/Box\";\nimport Chip from \"@mui/material/Chip\";\nimport Paper from \"@mui/material/Paper\";\n\nimport { styles } from \"./bottom-card.styles\";\n\ninterface bottomCardProps {\n  /**\n   * id: String thats needs to be displayed in chip\n   */\n  id?: string | null;\n  children: JSX.Element | JSX.Element[];\n}\n\n/**\n * Paper element with chip at top-left\n * and render children within paper\n */\nexport const BottomCard = ({ id, children }: bottomCardProps) => {\n  return (\n    <Paper elevation={2} sx={{ m: 2 }}>\n      <Box sx={styles.wrapper}>\n        {id && <Chip label={id} color=\"primary\" sx={styles.chip} />}\n      </Box>\n      <Box sx={styles.center}>{children}</Box>\n      <Box sx={styles.bottomSpace} />\n    </Paper>\n  );\n};\n","import { useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { SubHeaderAppBar } from \"./sub-header-app-bar\";\nimport { styles } from \"./sub-header.styles\";\n\ninterface SubHeaderProps {\n  /**\n   * title: Main text\n   */\n  title: String;\n  /**\n   * icon: Optional icaon thats needs to be displayed before title\n   */\n  icon?: JSX.Element;\n  /**\n   * chip: chip thats needs to be displayed after the title\n   */\n  chip?: JSX.Element | null;\n  /**\n   * enableBack: Enable back icon button\n   */\n  enableBack?: boolean;\n  /**\n   * onClickBack: Callback when back icon button clicked\n   */\n  onClickBack?: () => void;\n  /**\n   * actions: Array of elements thats need to be displayed at the right end\n   */\n  actions?: JSX.Element[];\n}\n\n/**\n * Displays\n * <Back button>, <icon> , <title>, <actions> in an appbar\n * <Back button> click will pop the navigation stack or will invoke callback if provided\n */\nexport const SubHeader = ({\n  title,\n  icon,\n  chip = null,\n  enableBack = false,\n  onClickBack,\n  actions = [],\n}: SubHeaderProps) => {\n  const navigate = useNavigate();\n\n  const onClickBackButton = useCallback(() => {\n    if (onClickBack) {\n      onClickBack();\n    } else {\n      navigate(-1);\n    }\n  }, [onClickBack, navigate]);\n\n  return (\n    <SubHeaderAppBar>\n      <Box sx={styles.wrapper}>\n        {enableBack && (\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n            onClick={onClickBackButton}\n          >\n            <ArrowBackIcon fontSize=\"large\" />\n          </IconButton>\n        )}\n        {icon}\n        <Typography variant=\"h5\" component=\"div\" sx={styles.title}>\n          {title}\n        </Typography>\n        {chip}\n      </Box>\n      <Box>{actions}</Box>\n    </SubHeaderAppBar>\n  );\n};\n","import { useContext, useCallback } from \"react\";\n\nimport { KeyboardContext } from \"../../contexts/keyboard\";\nimport { appLogger } from \"../../utilities/app-logs/app-logger\";\nimport { InputForm } from \"../common/input-form/input-form\";\n\ninterface GlobalKeyboadProps {\n  /**\n   * title: Title of the input form\n   */\n  title: string;\n  /**\n   * inputLabel: Text thats displayed on input\n   */\n  inputLabel: string;\n  /**\n   * onConfirm: Callback when Confirm button is clicked\n   */\n  onConfirm: (value: string) => void;\n}\n\n/**\n * invokes onConfirm callback when <confirm button> is clicked\n */\nexport const GlobalKeyboard = ({\n  title,\n  inputLabel,\n  onConfirm,\n}: GlobalKeyboadProps) => {\n  const { keyboard, setKeyboard } = useContext(KeyboardContext);\n\n  const onClickConfirm = useCallback(\n    (value: string) => {\n      appLogger.action(`Global-Keyboard: confirm button clicked with ${value}`);\n      onConfirm(value);\n      setKeyboard({ ...keyboard, open: false });\n    },\n    [onConfirm, keyboard, setKeyboard]\n  );\n\n  return (\n    <InputForm\n      inputLabel={inputLabel}\n      title={title}\n      onConfirm={onClickConfirm}\n    />\n  );\n};\n","import { useContext, useCallback, useEffect, DependencyList } from \"react\";\n\nimport { KeyboardContext, KeyboardDefaults } from \"../../contexts/keyboard\";\nimport { GlobalKeyboard } from \"./gobal-keyboard\";\n\ninterface UseGlobalKeyboard extends KeyboardDefaults {\n  /**\n   * title: Title of the input form\n   */\n  title: string;\n  /**\n   * inputLabel: Text thats displayed on input\n   */\n  inputLabel: string;\n  /**\n   * onClickGlobalKeyboardConfirm: Callback when Confirm button is clicked\n   */\n  onClickGlobalKeyboardConfirm: (val: string) => void;\n}\n\n/**\n * Listens to KeyboardContext\n * triggers callback when confirm button is clicked\n */\nexport const useGlobalKeyboard = (\n  {\n    title = \"\",\n    inputLabel = \"\",\n    onClickGlobalKeyboardConfirm,\n    disabled = false,\n    open = false,\n  }: Partial<UseGlobalKeyboard>,\n  deps: DependencyList = []\n) => {\n  const { keyboard, setKeyboard } = useContext(KeyboardContext);\n\n  const onGlobalKeyboardConfirm = useCallback(\n    (value: string) => {\n      onClickGlobalKeyboardConfirm && onClickGlobalKeyboardConfirm(value);\n    },\n    [onClickGlobalKeyboardConfirm]\n  );\n\n  useEffect(() => {\n    setKeyboard({\n      ...keyboard,\n      disabled,\n      open,\n      children: (\n        <GlobalKeyboard\n          title={title}\n          inputLabel={inputLabel}\n          onConfirm={onGlobalKeyboardConfirm}\n        />\n      ),\n    });\n    // eslint-disable-next-line\n  }, [...deps]);\n};\n","import { useQuery } from \"@tanstack/react-query\";\nimport { AxiosError, AxiosResponse } from \"axios\";\nimport { useCallback, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\n\nimport { AlertContext } from \"../../contexts/alert\";\nimport { GlobalsContext } from \"../../contexts/globals\";\nimport { TclResponse } from \"../../types/scan-tcl\";\nimport { apiHandler } from \"../../utilities/api-handler\";\nimport { appLogger } from \"../../utilities/app-logs/app-logger\";\nimport { axiosRequest } from \"../../utilities/axios-request\";\nimport { useScannedEventListener } from \"../../utilities/useEventListener\";\nimport { useHandlePageRefresh } from \"../../utilities/useHandlePageRefresh\";\nimport { BottomCard } from \"../common/bottom-card/bottom-card\";\nimport { Barcode } from \"../common/images/barcode\";\nimport { Tote } from \"../common/images/tote\";\nimport { SubHeader } from \"../common/sub-header/sub-header\";\nimport { useGlobalKeyboard } from \"../global-keyboard/useGlobalKeyboard\";\nimport { ScanCartNavState } from \"../scan-cart/scan-cart\";\n\nconst getTclInfoDetails = (tcl: string) =>\n  axiosRequest(apiHandler.getTclInfo(tcl), {\n    description: `Scan-Tcl: tcl ${tcl} validation`,\n  });\nexport interface ScanTclNavState extends ScanCartNavState {\n  tclInfo: TclResponse;\n}\n\n/**\n *\n * @route Validates the tcl with api\n */\nexport default function ScanTcl() {\n  // get state values from scan-cart page\n  const scanCartNavState = useHandlePageRefresh<ScanCartNavState>();\n  const navigate = useNavigate();\n  const { setAlerts } = useContext(AlertContext);\n  const { globals, setGlobals } = useContext(GlobalsContext);\n  const [tcl, setTcl] = useState(\"\");\n\n  const getTclDataSuccess = (response: AxiosResponse) => {\n    setAlerts({\n      success: \"TCL found\",\n    });\n    // navigate to scan upc page with data as state\n    appLogger.action(\"Scan-Tcl: navigate to scan-upc page\");\n    navigate(\"/scan-upc\", {\n      state: { ...scanCartNavState, tclInfo: response.data },\n    });\n  };\n\n  const getTclDataError = (error: AxiosError<any>) => {\n    setAlerts({\n      error:\n        error?.response?.data?.errorMessage || error?.message || \"TCL error\",\n    });\n  };\n\n  useEffect(() => {\n    // reset multi sku if on root page or scan-tcl page\n    setGlobals({\n      ...globals,\n      multiSku: false,\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  const { refetch } = useQuery(\n    [\"tcl\", tcl],\n    () => {\n      setAlerts({ loading: true });\n      return getTclInfoDetails(tcl);\n    },\n    {\n      enabled: !!tcl,\n      onSuccess: getTclDataSuccess,\n      onError: getTclDataError,\n    }\n  );\n\n  const onBarcodeScanned = (value: string) => {\n    appLogger.action(`Scan-Tcl: entered/scanned ${value} tcl`);\n    if (tcl === value) {\n      refetch();\n    } else {\n      setTcl(value);\n    }\n  };\n\n  useScannedEventListener((event) => {\n    const parsed = event.detail.parsed.get(\"1D\");\n    if (parsed) {\n      onBarcodeScanned(parsed);\n    } else {\n      setAlerts({\n        error: `Unexpected barcode scanned ${event.detail.scanned}`,\n      });\n    }\n  });\n\n  useGlobalKeyboard(\n    {\n      title: \"Enter TCL\",\n      inputLabel: \"TCL\",\n      onClickGlobalKeyboardConfirm: (value: string) => onBarcodeScanned(value),\n    },\n    [tcl]\n  );\n\n  const onBackClick = useCallback(() => {\n    appLogger.action(\"Scan-Tcl: Back button clicked\");\n    navigate(\"/scan-cart\", {\n      state: { ...scanCartNavState },\n      replace: true,\n    });\n  }, [navigate, scanCartNavState]);\n\n  return (\n    <>\n      <SubHeader\n        icon={\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n            disabled\n          >\n            <Barcode />\n          </IconButton>\n        }\n        title=\"Scan TCL\"\n        enableBack\n        onClickBack={onBackClick}\n      />\n      <Box sx={{ mt: 17 }} />\n      <BottomCard id={`Cart #: ${scanCartNavState?.cartId}`}>\n        <Tote />\n      </BottomCard>\n    </>\n  );\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');\n\nexports.default = _default;"],"names":["styles","bottomSpace","borderTop","m","pb","chip","borderRadius","left","position","top","wrapper","alignItems","display","height","justifyContent","center","flexDirection","BottomCard","id","children","Paper","elevation","sx","Box","Chip","label","color","SubHeader","title","icon","enableBack","onClickBack","actions","navigate","useNavigate","onClickBackButton","useCallback","size","edge","mr","onClick","fontSize","variant","component","GlobalKeyboard","inputLabel","onConfirm","useContext","KeyboardContext","keyboard","setKeyboard","onClickConfirm","value","appLogger","open","useGlobalKeyboard","onClickGlobalKeyboardConfirm","disabled","deps","onGlobalKeyboardConfirm","useEffect","ScanTcl","scanCartNavState","useHandlePageRefresh","setAlerts","AlertContext","GlobalsContext","globals","setGlobals","useState","tcl","setTcl","multiSku","refetch","useQuery","loading","axiosRequest","apiHandler","description","getTclInfoDetails","enabled","onSuccess","response","success","state","tclInfo","data","onError","error","errorMessage","message","onBarcodeScanned","useScannedEventListener","event","parsed","detail","get","scanned","onBackClick","replace","mt","cartId","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}