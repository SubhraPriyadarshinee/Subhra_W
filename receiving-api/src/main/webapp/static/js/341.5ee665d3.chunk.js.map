{"version":3,"file":"static/js/341.5ee665d3.chunk.js","mappings":"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","sources":["components/common/bottom-card/bottom-card.styles.ts","components/common/bottom-card/bottom-card.tsx","components/common/sub-header/sub-header.tsx","components/global-keyboard/gobal-keyboard.tsx","components/global-keyboard/useGlobalKeyboard.tsx","styles/images/grid.svg","components/common/images/grid.tsx","components/scan-cart/scan-cart.tsx","../node_modules/@mui/icons-material/ArrowBack.js"],"sourcesContent":["export const styles = {\n  bottomSpace: {\n    borderTop: \"1px solid lightgray\",\n    m: 2,\n    pb: 10,\n  },\n  chip: {\n    borderRadius: 0,\n    left: 16,\n    position: \"absolute\",\n    top: 16,\n  },\n  wrapper: {\n    alignItems: \"center\",\n    display: \"flex\",\n    height: 50,\n    justifyContent: \"center\",\n    position: \"relative\",\n  },\n  center: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n};\n","import Box from \"@mui/material/Box\";\nimport Chip from \"@mui/material/Chip\";\nimport Paper from \"@mui/material/Paper\";\n\nimport { styles } from \"./bottom-card.styles\";\n\ninterface bottomCardProps {\n  /**\n   * id: String thats needs to be displayed in chip\n   */\n  id?: string | null;\n  children: JSX.Element | JSX.Element[];\n}\n\n/**\n * Paper element with chip at top-left\n * and render children within paper\n */\nexport const BottomCard = ({ id, children }: bottomCardProps) => {\n  return (\n    <Paper elevation={2} sx={{ m: 2 }}>\n      <Box sx={styles.wrapper}>\n        {id && <Chip label={id} color=\"primary\" sx={styles.chip} />}\n      </Box>\n      <Box sx={styles.center}>{children}</Box>\n      <Box sx={styles.bottomSpace} />\n    </Paper>\n  );\n};\n","import { useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { SubHeaderAppBar } from \"./sub-header-app-bar\";\nimport { styles } from \"./sub-header.styles\";\n\ninterface SubHeaderProps {\n  /**\n   * title: Main text\n   */\n  title: String;\n  /**\n   * icon: Optional icaon thats needs to be displayed before title\n   */\n  icon?: JSX.Element;\n  /**\n   * chip: chip thats needs to be displayed after the title\n   */\n  chip?: JSX.Element | null;\n  /**\n   * enableBack: Enable back icon button\n   */\n  enableBack?: boolean;\n  /**\n   * onClickBack: Callback when back icon button clicked\n   */\n  onClickBack?: () => void;\n  /**\n   * actions: Array of elements thats need to be displayed at the right end\n   */\n  actions?: JSX.Element[];\n}\n\n/**\n * Displays\n * <Back button>, <icon> , <title>, <actions> in an appbar\n * <Back button> click will pop the navigation stack or will invoke callback if provided\n */\nexport const SubHeader = ({\n  title,\n  icon,\n  chip = null,\n  enableBack = false,\n  onClickBack,\n  actions = [],\n}: SubHeaderProps) => {\n  const navigate = useNavigate();\n\n  const onClickBackButton = useCallback(() => {\n    if (onClickBack) {\n      onClickBack();\n    } else {\n      navigate(-1);\n    }\n  }, [onClickBack, navigate]);\n\n  return (\n    <SubHeaderAppBar>\n      <Box sx={styles.wrapper}>\n        {enableBack && (\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n            onClick={onClickBackButton}\n          >\n            <ArrowBackIcon fontSize=\"large\" />\n          </IconButton>\n        )}\n        {icon}\n        <Typography variant=\"h5\" component=\"div\" sx={styles.title}>\n          {title}\n        </Typography>\n        {chip}\n      </Box>\n      <Box>{actions}</Box>\n    </SubHeaderAppBar>\n  );\n};\n","import { useContext, useCallback } from \"react\";\n\nimport { KeyboardContext } from \"../../contexts/keyboard\";\nimport { appLogger } from \"../../utilities/app-logs/app-logger\";\nimport { InputForm } from \"../common/input-form/input-form\";\n\ninterface GlobalKeyboadProps {\n  /**\n   * title: Title of the input form\n   */\n  title: string;\n  /**\n   * inputLabel: Text thats displayed on input\n   */\n  inputLabel: string;\n  /**\n   * onConfirm: Callback when Confirm button is clicked\n   */\n  onConfirm: (value: string) => void;\n}\n\n/**\n * invokes onConfirm callback when <confirm button> is clicked\n */\nexport const GlobalKeyboard = ({\n  title,\n  inputLabel,\n  onConfirm,\n}: GlobalKeyboadProps) => {\n  const { keyboard, setKeyboard } = useContext(KeyboardContext);\n\n  const onClickConfirm = useCallback(\n    (value: string) => {\n      appLogger.action(`Global-Keyboard: confirm button clicked with ${value}`);\n      onConfirm(value);\n      setKeyboard({ ...keyboard, open: false });\n    },\n    [onConfirm, keyboard, setKeyboard]\n  );\n\n  return (\n    <InputForm\n      inputLabel={inputLabel}\n      title={title}\n      onConfirm={onClickConfirm}\n    />\n  );\n};\n","import { useContext, useCallback, useEffect, DependencyList } from \"react\";\n\nimport { KeyboardContext, KeyboardDefaults } from \"../../contexts/keyboard\";\nimport { GlobalKeyboard } from \"./gobal-keyboard\";\n\ninterface UseGlobalKeyboard extends KeyboardDefaults {\n  /**\n   * title: Title of the input form\n   */\n  title: string;\n  /**\n   * inputLabel: Text thats displayed on input\n   */\n  inputLabel: string;\n  /**\n   * onClickGlobalKeyboardConfirm: Callback when Confirm button is clicked\n   */\n  onClickGlobalKeyboardConfirm: (val: string) => void;\n}\n\n/**\n * Listens to KeyboardContext\n * triggers callback when confirm button is clicked\n */\nexport const useGlobalKeyboard = (\n  {\n    title = \"\",\n    inputLabel = \"\",\n    onClickGlobalKeyboardConfirm,\n    disabled = false,\n    open = false,\n  }: Partial<UseGlobalKeyboard>,\n  deps: DependencyList = []\n) => {\n  const { keyboard, setKeyboard } = useContext(KeyboardContext);\n\n  const onGlobalKeyboardConfirm = useCallback(\n    (value: string) => {\n      onClickGlobalKeyboardConfirm && onClickGlobalKeyboardConfirm(value);\n    },\n    [onClickGlobalKeyboardConfirm]\n  );\n\n  useEffect(() => {\n    setKeyboard({\n      ...keyboard,\n      disabled,\n      open,\n      children: (\n        <GlobalKeyboard\n          title={title}\n          inputLabel={inputLabel}\n          onConfirm={onGlobalKeyboardConfirm}\n        />\n      ),\n    });\n    // eslint-disable-next-line\n  }, [...deps]);\n};\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgGrid(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 190,\n    height: 189,\n    viewBox: \"0 0 190 189\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5.59717 0C2.53981 0.0086851 0.0643586 2.48413 0.0556868 5.54148V183.424C0.0470017 186.49 2.52247 188.991 5.59717 189H183.479H183.471C184.956 189.009 186.381 188.418 187.431 187.376C188.474 186.325 189.064 184.9 189.056 183.424V5.54154C189.047 2.46685 186.545 -0.00860496 183.471 6.67964e-05L5.59717 0ZM11.1733 11.1176H59.3439V59.2882H11.1733V11.1176ZM70.4615 11.1176H118.65V59.2882H70.4615V11.1176ZM129.759 11.1176H177.938V59.2882H129.767L129.759 11.1176ZM11.1733 70.4147H59.3439V118.585L11.1733 118.594V70.4147ZM70.4615 70.4147H118.641V118.585L70.4615 118.594V70.4147ZM129.759 70.4147H177.929V118.585L129.767 118.594L129.759 70.4147ZM11.1644 129.703H59.335V177.873L11.1733 177.882L11.1644 129.703ZM70.4526 129.703H118.632V177.873L70.4615 177.882L70.4526 129.703ZM129.75 129.703H177.92V177.873L129.767 177.882L129.75 129.703Z\",\n    fill: \"lightgray\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgGrid);\nexport default __webpack_public_path__ + \"static/media/grid.10606bfac95364a10f6f4d241dd30225.svg\";\nexport { ForwardRef as ReactComponent };","import gridImage from \"../../../styles/images/grid.svg\";\n\ninterface GridProps {\n  height?: string;\n  width?: string;\n}\n\nexport const Grid = ({ height = \"152px\", width = \"152px\" }: GridProps) => {\n  return <img src={gridImage} alt=\"grid\" style={{ height, width }} />;\n};\n","import { useQuery } from \"@tanstack/react-query\";\nimport { AxiosError, AxiosResponse } from \"axios\";\nimport { useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\n\nimport { AlertContext } from \"../../contexts/alert\";\nimport { GlobalsContext } from \"../../contexts/globals\";\nimport { LocationResponse } from \"../../types/location\";\nimport { MyAppsData } from \"../../types/my-apps\";\nimport { apiHandler } from \"../../utilities/api-handler\";\nimport { appLogger } from \"../../utilities/app-logs/app-logger\";\nimport { axiosRequest } from \"../../utilities/axios-request\";\nimport { sessionHandler } from \"../../utilities/session-handler\";\nimport { useScannedEventListener } from \"../../utilities/useEventListener\";\nimport { BottomCard } from \"../common/bottom-card/bottom-card\";\nimport { Barcode } from \"../common/images/barcode\";\nimport { Grid } from \"../common/images/grid\";\nimport { SubHeader } from \"../common/sub-header/sub-header\";\nimport { useGlobalKeyboard } from \"../global-keyboard/useGlobalKeyboard\";\n\nconst getCartLocationDetails = (cartLocation: string) =>\n  axiosRequest(apiHandler.getLocation(cartLocation), {\n    description: `Scan-Cart: cart ${cartLocation} validation`,\n  });\n\nexport interface ScanCartNavState {\n  cartId: string;\n  doorNumber: string;\n}\n\n/**\n * @route Validates cart with location api\n */\nexport default function ScanCart() {\n  const navigate = useNavigate();\n  const [cartLocation, setCartLocation] = useState(\"\");\n  const { setAlerts } = useContext(AlertContext);\n  const { globals, setGlobals } = useContext(GlobalsContext);\n  const myAppsData = sessionHandler.getSessionStorage<MyAppsData>(\"myApps\");\n  const enableLocationValidation =\n    myAppsData?.dynamicConfig.enableLocationValidation || false;\n\n  const getSuccessResponse = (location: string) => {\n    setAlerts({ success: \"Cart validation success\" });\n    // navigate to scan docktag\n    appLogger.action(\"Scan-Cart: navigate to scan-dock-tag page\");\n    const locationName = location;\n    navigate(\"/scan-dock-tag-or-tcl\", {\n      state: { cartId: locationName, doorNumber: locationName },\n    });\n  };\n\n  const getCartLocationInfoSuccess = (\n    response: AxiosResponse<LocationResponse>\n  ) => {\n    const { locationType } = response.data;\n    if (enableLocationValidation) {\n      if (locationType === \"Decant Station\") {\n        getSuccessResponse(response.data.locationName);\n      } else {\n        setAlerts({\n          error:\n            \"The cart location you scanned is invalid. Please scan a valid cart location to proceed.\",\n        });\n      }\n    } else {\n      getSuccessResponse(response.data.locationName);\n    }\n  };\n\n  const getCartLocationInfoError = (error: AxiosError<any>) => {\n    setAlerts({\n      error:\n        error?.response?.data?.errorMessage ||\n        error?.message ||\n        \"Cart validation error\",\n    });\n  };\n\n  useEffect(() => {\n    // reset multi sku if on root page or scan-dock-tag page\n    setGlobals({\n      ...globals,\n      multiSku: false,\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  const { refetch: refetchLocatonDetails } = useQuery(\n    [\"cartLocation\", cartLocation],\n    () => {\n      setAlerts({ loading: true });\n      return getCartLocationDetails(cartLocation);\n    },\n    {\n      enabled: !!cartLocation,\n      onSuccess: getCartLocationInfoSuccess,\n      onError: getCartLocationInfoError,\n    }\n  );\n\n  const onBarcodeScanned = (value: string) => {\n    appLogger.action(`Scan-Cart: entered/scanned ${value} cart`);\n    if (cartLocation === value) {\n      refetchLocatonDetails();\n    } else {\n      setCartLocation(value);\n    }\n  };\n\n  useScannedEventListener((event) => {\n    const parsed = event.detail.parsed.get(\"1D\");\n    if (parsed) {\n      onBarcodeScanned(parsed);\n    } else {\n      setAlerts({\n        error: `Unexpected barcode scanned ${event.detail.scanned}`,\n      });\n    }\n  });\n\n  useGlobalKeyboard(\n    {\n      title: \"Enter Cart\",\n      inputLabel: \"Cart\",\n      onClickGlobalKeyboardConfirm: (value: string) => onBarcodeScanned(value),\n    },\n    [cartLocation]\n  );\n\n  return (\n    <>\n      <SubHeader\n        icon={\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n            disabled\n          >\n            <Barcode />\n          </IconButton>\n        }\n        title=\"Scan Cart\"\n      />\n      <Box sx={{ mt: 17 }} />\n      <BottomCard>\n        <Grid />\n      </BottomCard>\n    </>\n  );\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');\n\nexports.default = _default;"],"names":["styles","bottomSpace","borderTop","m","pb","chip","borderRadius","left","position","top","wrapper","alignItems","display","height","justifyContent","center","flexDirection","BottomCard","id","children","Paper","elevation","sx","Box","Chip","label","color","SubHeader","title","icon","enableBack","onClickBack","actions","navigate","useNavigate","onClickBackButton","useCallback","size","edge","mr","onClick","fontSize","variant","component","GlobalKeyboard","inputLabel","onConfirm","useContext","KeyboardContext","keyboard","setKeyboard","onClickConfirm","value","appLogger","open","useGlobalKeyboard","onClickGlobalKeyboardConfirm","disabled","deps","onGlobalKeyboardConfirm","useEffect","Grid","width","src","gridImage","alt","style","ScanCart","useState","cartLocation","setCartLocation","setAlerts","AlertContext","GlobalsContext","globals","setGlobals","myAppsData","sessionHandler","enableLocationValidation","dynamicConfig","getSuccessResponse","location","success","state","cartId","doorNumber","multiSku","refetchLocatonDetails","useQuery","loading","axiosRequest","apiHandler","description","getCartLocationDetails","enabled","onSuccess","response","locationType","data","locationName","error","onError","errorMessage","message","refetch","onBarcodeScanned","useScannedEventListener","event","parsed","detail","get","scanned","IconButton","mt","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}