{"version":3,"file":"static/js/831.9b5a14d1.chunk.js","mappings":"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","sources":["components/common/sub-header/sub-header.tsx","components/global-keyboard/gobal-keyboard.tsx","components/global-keyboard/useGlobalKeyboard.tsx","components/scan-lpn/scan-lpn.style.ts","components/scan-lpn/scan-lpn.tsx"],"sourcesContent":["import { useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { SubHeaderAppBar } from \"./sub-header-app-bar\";\nimport { styles } from \"./sub-header.styles\";\n\ninterface SubHeaderProps {\n  /**\n   * title: Main text\n   */\n  title: String;\n  /**\n   * icon: Optional icaon thats needs to be displayed before title\n   */\n  icon?: JSX.Element;\n  /**\n   * chip: chip thats needs to be displayed after the title\n   */\n  chip?: JSX.Element | null;\n  /**\n   * enableBack: Enable back icon button\n   */\n  enableBack?: boolean;\n  /**\n   * onClickBack: Callback when back icon button clicked\n   */\n  onClickBack?: () => void;\n  /**\n   * actions: Array of elements thats need to be displayed at the right end\n   */\n  actions?: JSX.Element[];\n}\n\n/**\n * Displays\n * <Back button>, <icon> , <title>, <actions> in an appbar\n * <Back button> click will pop the navigation stack or will invoke callback if provided\n */\nexport const SubHeader = ({\n  title,\n  icon,\n  chip = null,\n  enableBack = false,\n  onClickBack,\n  actions = [],\n}: SubHeaderProps) => {\n  const navigate = useNavigate();\n\n  const onClickBackButton = useCallback(() => {\n    if (onClickBack) {\n      onClickBack();\n    } else {\n      navigate(-1);\n    }\n  }, [onClickBack, navigate]);\n\n  return (\n    <SubHeaderAppBar>\n      <Box sx={styles.wrapper}>\n        {enableBack && (\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n            onClick={onClickBackButton}\n          >\n            <ArrowBackIcon fontSize=\"large\" />\n          </IconButton>\n        )}\n        {icon}\n        <Typography variant=\"h5\" component=\"div\" sx={styles.title}>\n          {title}\n        </Typography>\n        {chip}\n      </Box>\n      <Box>{actions}</Box>\n    </SubHeaderAppBar>\n  );\n};\n","import { useContext, useCallback } from \"react\";\n\nimport { KeyboardContext } from \"../../contexts/keyboard\";\nimport { appLogger } from \"../../utilities/app-logs/app-logger\";\nimport { InputForm } from \"../common/input-form/input-form\";\n\ninterface GlobalKeyboadProps {\n  /**\n   * title: Title of the input form\n   */\n  title: string;\n  /**\n   * inputLabel: Text thats displayed on input\n   */\n  inputLabel: string;\n  /**\n   * onConfirm: Callback when Confirm button is clicked\n   */\n  onConfirm: (value: string) => void;\n}\n\n/**\n * invokes onConfirm callback when <confirm button> is clicked\n */\nexport const GlobalKeyboard = ({\n  title,\n  inputLabel,\n  onConfirm,\n}: GlobalKeyboadProps) => {\n  const { keyboard, setKeyboard } = useContext(KeyboardContext);\n\n  const onClickConfirm = useCallback(\n    (value: string) => {\n      appLogger.action(`Global-Keyboard: confirm button clicked with ${value}`);\n      onConfirm(value);\n      setKeyboard({ ...keyboard, open: false });\n    },\n    [onConfirm, keyboard, setKeyboard]\n  );\n\n  return (\n    <InputForm\n      inputLabel={inputLabel}\n      title={title}\n      onConfirm={onClickConfirm}\n    />\n  );\n};\n","import { useContext, useCallback, useEffect, DependencyList } from \"react\";\n\nimport { KeyboardContext, KeyboardDefaults } from \"../../contexts/keyboard\";\nimport { GlobalKeyboard } from \"./gobal-keyboard\";\n\ninterface UseGlobalKeyboard extends KeyboardDefaults {\n  /**\n   * title: Title of the input form\n   */\n  title: string;\n  /**\n   * inputLabel: Text thats displayed on input\n   */\n  inputLabel: string;\n  /**\n   * onClickGlobalKeyboardConfirm: Callback when Confirm button is clicked\n   */\n  onClickGlobalKeyboardConfirm: (val: string) => void;\n}\n\n/**\n * Listens to KeyboardContext\n * triggers callback when confirm button is clicked\n */\nexport const useGlobalKeyboard = (\n  {\n    title = \"\",\n    inputLabel = \"\",\n    onClickGlobalKeyboardConfirm,\n    disabled = false,\n    open = false,\n  }: Partial<UseGlobalKeyboard>,\n  deps: DependencyList = []\n) => {\n  const { keyboard, setKeyboard } = useContext(KeyboardContext);\n\n  const onGlobalKeyboardConfirm = useCallback(\n    (value: string) => {\n      onClickGlobalKeyboardConfirm && onClickGlobalKeyboardConfirm(value);\n    },\n    [onClickGlobalKeyboardConfirm]\n  );\n\n  useEffect(() => {\n    setKeyboard({\n      ...keyboard,\n      disabled,\n      open,\n      children: (\n        <GlobalKeyboard\n          title={title}\n          inputLabel={inputLabel}\n          onConfirm={onGlobalKeyboardConfirm}\n        />\n      ),\n    });\n    // eslint-disable-next-line\n  }, [...deps]);\n};\n","export const styles = {\n  button: {\n    borderRadius: \"20px\",\n    fontWeight: \"bold\",\n    m: 0.5,\n  },\n};\n","import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { AxiosError, AxiosResponse } from \"axios\";\nimport { ChangeEvent, useCallback, useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport Button from \"@mui/material/Button\";\nimport FormControl from \"@mui/material/FormControl\";\nimport IconButton from \"@mui/material/IconButton\";\nimport TextField from \"@mui/material/TextField\";\n\nimport { AlertContext } from \"../../contexts/alert\";\nimport { ContainersResponse } from \"../../types/containers\";\nimport { DeliveryDocument } from \"../../types/instruction\";\nimport {\n  apiHandler,\n  GetScannedUpcInfoRequest,\n} from \"../../utilities/api-handler\";\nimport { appLogger } from \"../../utilities/app-logs/app-logger\";\nimport { axiosRequest } from \"../../utilities/axios-request\";\nimport { useScannedEventListener } from \"../../utilities/useEventListener\";\nimport { Barcode } from \"../common/images/barcode\";\nimport { SubHeader } from \"../common/sub-header/sub-header\";\nimport { useGlobalKeyboard } from \"../global-keyboard/useGlobalKeyboard\";\nimport { allowedStatusHandler } from \"../scan-upc/allowed-status\";\nimport { styles } from \"./scan-lpn.style\";\n\nconst getScannedUpcInfo = (getScannedUpcRequest: GetScannedUpcInfoRequest) =>\n  axiosRequest(apiHandler.getScannedUpcInfo(getScannedUpcRequest), {\n    description: `Scan-Lpn: get delivery document for upc ${getScannedUpcRequest.upcNumber} details`,\n  });\n\nconst getContainerDetails = (containerId: string) =>\n  axiosRequest(apiHandler.getContainerInfo(containerId), {\n    description: `Scan-Lpn: lpn ${containerId} info`,\n  });\n\nexport interface ScanLpnNavState {\n  lpnInfo: ContainersResponse;\n  gdmDeliveryDocuments: DeliveryDocument[];\n  containerId: string;\n}\n\nexport default function ScanLpn() {\n  const navigate = useNavigate();\n  const { setAlerts } = useContext(AlertContext);\n  const [containerId, setContainerId] = useState(\"\");\n  const [lpnInfo, setLpnInfo] = useState(null);\n  const [deliveryNumber, setDeliveryNumber] = useState(\"\");\n  const [itemUpc, setItemUpc] = useState(\"\");\n\n  const getGdmDeliveryDocsSuccess = (response: AxiosResponse) => {\n    setAlerts({ success: \"LPN found\" });\n\n    const allowedDeliveryDocs = allowedStatusHandler.filterDeliveryDocuments(\n      response.data\n    );\n\n    /**\n     * @todo this will potentially show wron item details, but doing it as temp fix\n     * ideally there should be a PO selection screen.\n     */\n    if (allowedDeliveryDocs.length) {\n      // navigate to enter-quntity route\n      appLogger.action(\"Scan-Upc: navigate to item-quantity page\");\n      navigate(\"/update-item-quantity\", {\n        state: {\n          lpnInfo: lpnInfo,\n          gdmDeliveryDocuments: allowedDeliveryDocs,\n          containerId: containerId,\n        },\n      });\n    } else {\n      setAlerts({ error: \"No POs are available\" });\n      appLogger.error(\"Scan-Upc: no po's availaible for scanned upc\", {});\n    }\n  };\n\n  const getGdmDeliveryDocsError = (error: AxiosError<any>) => {\n    setAlerts({\n      error:\n        (error?.response?.data.description &&\n          error?.response?.data.description[0]) ||\n        error?.message ||\n        \"Scan Lpn error\",\n    });\n  };\n\n  useQuery(\n    [\"scanUPC\", deliveryNumber, itemUpc],\n    () =>\n      getScannedUpcInfo({\n        deliveryNumber: deliveryNumber,\n        upcNumber: itemUpc,\n      }),\n    {\n      enabled: !!(deliveryNumber && itemUpc),\n      onSuccess: getGdmDeliveryDocsSuccess,\n      onError: getGdmDeliveryDocsError,\n      onSettled: () => {\n        setDeliveryNumber(\"\");\n        setItemUpc(\"\");\n      },\n    }\n  );\n  const getLpnDataSuccess = useCallback(\n    (response: AxiosResponse) => {\n      setLpnInfo(response.data);\n      const containerType = response.data.containerType;\n      const containerStatus = response.data.containerStatus;\n      if (containerType === \"Vendor Pack\") {\n        if (\n          containerStatus === \"PICKED\" ||\n          (containerStatus === \"AVAILABLE\" &&\n            response.data.destinationLocationId === 0)\n        ) {\n          setDeliveryNumber(response.data.deliveryNumber);\n          setItemUpc(response.data.containerInventoryList[0].itemUPC);\n        } else if (response.data.containerStatus !== \"AVAILABLE\") {\n          setAlerts({\n            error: `The label you scanned is in ${containerStatus} status and is not eligible for correction.`,\n          });\n        } else {\n          setAlerts({\n            error:\n              \"Please scan a valid LPN. Only casepack and induct LPNs supported.\",\n          });\n        }\n      } else {\n        setAlerts({\n          error:\n            \"Please scan a valid LPN. Only casepack and induct LPNs supported.\",\n        });\n      }\n    },\n    [setAlerts, setDeliveryNumber, setItemUpc]\n  );\n\n  const getLpnDataError = useCallback(\n    (error: AxiosError<any>) => {\n      appLogger.error(\"Scan-Lpn: LPN request error\", error);\n      const message = error.message;\n      console.error(\"Error: LPN error\", error?.response?.data);\n      if (message === \"Request failed with status code 404\") {\n        setAlerts({\n          error:\n            \"The label you scanned was not found and is not eligible for correction.\",\n        });\n      } else {\n        setAlerts({\n          error:\n            error?.response?.data?.errorMessage ||\n            error?.message ||\n            \"LPN error\",\n        });\n      }\n    },\n    [setAlerts]\n  );\n\n  const { mutate: receiveContainerId } = useMutation(getContainerDetails, {\n    onSuccess: (response) => getLpnDataSuccess(response as AxiosResponse),\n    onError: (error) => getLpnDataError(error as AxiosError<any>),\n  });\n\n  const onSumbitButton = useCallback(() => {\n    setAlerts({ loading: true });\n    receiveContainerId(containerId);\n  }, [setAlerts, containerId, receiveContainerId]);\n\n  const onBarcodeScanned = (value: string) => {\n    appLogger.action(`Scan-Lpn: entered/scanned ${value} lpn`);\n    setAlerts({ loading: true });\n    receiveContainerId(value);\n  };\n\n  useScannedEventListener((event) => {\n    const parsed = event.detail.parsed.get(\"1D\");\n    if (parsed) {\n      onBarcodeScanned(parsed);\n    } else {\n      setAlerts({\n        error: `Unexpected barcode scanned ${event.detail.scanned}`,\n      });\n    }\n  });\n\n  useGlobalKeyboard({\n    disabled: true,\n  });\n\n  const onBackClick = useCallback(() => {\n    appLogger.action(\"Scan-Lpn: Back button clicked\");\n    setDeliveryNumber(\"\");\n    setItemUpc(\"\");\n    navigate(-1);\n  }, [navigate]);\n\n  const onChangeQty = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const val = event.target.value;\n      setContainerId(val);\n    },\n    [setContainerId]\n  );\n\n  return (\n    <>\n      <SubHeader\n        icon={\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n            disabled\n          >\n            <Barcode />\n          </IconButton>\n        }\n        title=\"Scan LPN or Enter Manually\"\n        actions={[\n          <Button\n            variant=\"contained\"\n            key=\"receive\"\n            size=\"large\"\n            sx={styles.button}\n            disabled={!containerId.trim() || containerId.length !== 25}\n            onClick={onSumbitButton}\n          >\n            Submit\n          </Button>,\n        ]}\n        enableBack\n        onClickBack={onBackClick}\n      />\n      <FormControl sx={{ m: 2, mt: 0, width: [\"100%\", \"30ch\"] }}>\n        <p>\n          <b>LPN</b>\n        </p>\n        <TextField\n          id=\"LPN\"\n          type=\"string\"\n          error={containerId.trim().length !== 0 && containerId.length !== 25}\n          helperText={\n            containerId.trim().length !== 0 && containerId.length !== 25\n              ? \"Please enter 25 digit valid LPN\"\n              : \"\"\n          }\n          value={containerId}\n          onChange={onChangeQty}\n        />\n      </FormControl>\n    </>\n  );\n}\n"],"names":["SubHeader","title","icon","chip","enableBack","onClickBack","actions","navigate","useNavigate","onClickBackButton","useCallback","sx","styles","size","edge","color","mr","onClick","fontSize","variant","component","GlobalKeyboard","inputLabel","onConfirm","useContext","KeyboardContext","keyboard","setKeyboard","onClickConfirm","value","appLogger","open","useGlobalKeyboard","onClickGlobalKeyboardConfirm","disabled","deps","onGlobalKeyboardConfirm","useEffect","children","button","borderRadius","fontWeight","m","getContainerDetails","containerId","axiosRequest","apiHandler","description","ScanLpn","setAlerts","AlertContext","useState","setContainerId","lpnInfo","setLpnInfo","deliveryNumber","setDeliveryNumber","itemUpc","setItemUpc","useQuery","getScannedUpcRequest","upcNumber","enabled","onSuccess","response","success","allowedDeliveryDocs","allowedStatusHandler","data","length","state","gdmDeliveryDocuments","error","onError","message","onSettled","getLpnDataSuccess","containerType","containerStatus","destinationLocationId","containerInventoryList","itemUPC","getLpnDataError","console","errorMessage","receiveContainerId","useMutation","mutate","onSumbitButton","loading","useScannedEventListener","event","parsed","detail","get","scanned","onBackClick","onChangeQty","val","target","IconButton","Button","trim","FormControl","mt","width","TextField","id","type","helperText","onChange"],"sourceRoot":""}