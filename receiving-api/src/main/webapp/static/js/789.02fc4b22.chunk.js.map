{"version":3,"file":"static/js/789.02fc4b22.chunk.js","mappings":"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","sources":["components/common/sub-header/sub-header.tsx","components/global-keyboard/gobal-keyboard.tsx","components/global-keyboard/useGlobalKeyboard.tsx","components/re-engage-decant/re-engage-decant.style.ts","components/re-engage-decant/re-engage-decant.tsx"],"sourcesContent":["import { useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { SubHeaderAppBar } from \"./sub-header-app-bar\";\nimport { styles } from \"./sub-header.styles\";\n\ninterface SubHeaderProps {\n  /**\n   * title: Main text\n   */\n  title: String;\n  /**\n   * icon: Optional icaon thats needs to be displayed before title\n   */\n  icon?: JSX.Element;\n  /**\n   * chip: chip thats needs to be displayed after the title\n   */\n  chip?: JSX.Element | null;\n  /**\n   * enableBack: Enable back icon button\n   */\n  enableBack?: boolean;\n  /**\n   * onClickBack: Callback when back icon button clicked\n   */\n  onClickBack?: () => void;\n  /**\n   * actions: Array of elements thats need to be displayed at the right end\n   */\n  actions?: JSX.Element[];\n}\n\n/**\n * Displays\n * <Back button>, <icon> , <title>, <actions> in an appbar\n * <Back button> click will pop the navigation stack or will invoke callback if provided\n */\nexport const SubHeader = ({\n  title,\n  icon,\n  chip = null,\n  enableBack = false,\n  onClickBack,\n  actions = [],\n}: SubHeaderProps) => {\n  const navigate = useNavigate();\n\n  const onClickBackButton = useCallback(() => {\n    if (onClickBack) {\n      onClickBack();\n    } else {\n      navigate(-1);\n    }\n  }, [onClickBack, navigate]);\n\n  return (\n    <SubHeaderAppBar>\n      <Box sx={styles.wrapper}>\n        {enableBack && (\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n            onClick={onClickBackButton}\n          >\n            <ArrowBackIcon fontSize=\"large\" />\n          </IconButton>\n        )}\n        {icon}\n        <Typography variant=\"h5\" component=\"div\" sx={styles.title}>\n          {title}\n        </Typography>\n        {chip}\n      </Box>\n      <Box>{actions}</Box>\n    </SubHeaderAppBar>\n  );\n};\n","import { useContext, useCallback } from \"react\";\n\nimport { KeyboardContext } from \"../../contexts/keyboard\";\nimport { appLogger } from \"../../utilities/app-logs/app-logger\";\nimport { InputForm } from \"../common/input-form/input-form\";\n\ninterface GlobalKeyboadProps {\n  /**\n   * title: Title of the input form\n   */\n  title: string;\n  /**\n   * inputLabel: Text thats displayed on input\n   */\n  inputLabel: string;\n  /**\n   * onConfirm: Callback when Confirm button is clicked\n   */\n  onConfirm: (value: string) => void;\n}\n\n/**\n * invokes onConfirm callback when <confirm button> is clicked\n */\nexport const GlobalKeyboard = ({\n  title,\n  inputLabel,\n  onConfirm,\n}: GlobalKeyboadProps) => {\n  const { keyboard, setKeyboard } = useContext(KeyboardContext);\n\n  const onClickConfirm = useCallback(\n    (value: string) => {\n      appLogger.action(`Global-Keyboard: confirm button clicked with ${value}`);\n      onConfirm(value);\n      setKeyboard({ ...keyboard, open: false });\n    },\n    [onConfirm, keyboard, setKeyboard]\n  );\n\n  return (\n    <InputForm\n      inputLabel={inputLabel}\n      title={title}\n      onConfirm={onClickConfirm}\n    />\n  );\n};\n","import { useContext, useCallback, useEffect, DependencyList } from \"react\";\n\nimport { KeyboardContext, KeyboardDefaults } from \"../../contexts/keyboard\";\nimport { GlobalKeyboard } from \"./gobal-keyboard\";\n\ninterface UseGlobalKeyboard extends KeyboardDefaults {\n  /**\n   * title: Title of the input form\n   */\n  title: string;\n  /**\n   * inputLabel: Text thats displayed on input\n   */\n  inputLabel: string;\n  /**\n   * onClickGlobalKeyboardConfirm: Callback when Confirm button is clicked\n   */\n  onClickGlobalKeyboardConfirm: (val: string) => void;\n}\n\n/**\n * Listens to KeyboardContext\n * triggers callback when confirm button is clicked\n */\nexport const useGlobalKeyboard = (\n  {\n    title = \"\",\n    inputLabel = \"\",\n    onClickGlobalKeyboardConfirm,\n    disabled = false,\n    open = false,\n  }: Partial<UseGlobalKeyboard>,\n  deps: DependencyList = []\n) => {\n  const { keyboard, setKeyboard } = useContext(KeyboardContext);\n\n  const onGlobalKeyboardConfirm = useCallback(\n    (value: string) => {\n      onClickGlobalKeyboardConfirm && onClickGlobalKeyboardConfirm(value);\n    },\n    [onClickGlobalKeyboardConfirm]\n  );\n\n  useEffect(() => {\n    setKeyboard({\n      ...keyboard,\n      disabled,\n      open,\n      children: (\n        <GlobalKeyboard\n          title={title}\n          inputLabel={inputLabel}\n          onConfirm={onGlobalKeyboardConfirm}\n        />\n      ),\n    });\n    // eslint-disable-next-line\n  }, [...deps]);\n};\n","export const styles = {\n  button: {\n    borderRadius: \"20px\",\n    fontWeight: \"bold\",\n    m: 0.5,\n  },\n};\n","import { useMutation } from \"@tanstack/react-query\";\nimport { AxiosError, AxiosResponse } from \"axios\";\nimport { ChangeEvent, useCallback, useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport Button from \"@mui/material/Button\";\nimport FormControl from \"@mui/material/FormControl\";\nimport IconButton from \"@mui/material/IconButton\";\nimport TextField from \"@mui/material/TextField\";\n\nimport { AlertContext } from \"../../contexts/alert\";\nimport { ReceivingContainerResponse } from \"../../types/containers\";\nimport { apiHandler } from \"../../utilities/api-handler\";\nimport { appLogger } from \"../../utilities/app-logs/app-logger\";\nimport { axiosRequest } from \"../../utilities/axios-request\";\nimport { useScannedEventListener } from \"../../utilities/useEventListener\";\nimport { useHandlePageRefresh } from \"../../utilities/useHandlePageRefresh\";\nimport { Barcode } from \"../common/images/barcode\";\nimport { SubHeader } from \"../common/sub-header/sub-header\";\nimport { useGlobalKeyboard } from \"../global-keyboard/useGlobalKeyboard\";\nimport { styles } from \"./re-engage-decant.style\";\n\nexport interface GetLpnInfoRequest {\n  trackingId: string;\n  isReEngageDecantFlow: boolean;\n}\n\nexport interface ReEngageDecantNavState {\n  containerInfo: ReceivingContainerResponse;\n}\n\nconst getContainerDetails = (request: GetLpnInfoRequest) =>\n  axiosRequest(\n    apiHandler.getLpnInfo(request.trackingId, request.isReEngageDecantFlow),\n    {\n      description: `restart-decant-or-qty-correction: Restart Decant for ${request.trackingId} info`,\n    }\n  );\n\nexport interface ScanLpnNavState {\n  isReEngageDecantFlow?: boolean;\n  trackingId: string;\n  cartId: string;\n}\n\nexport default function ReEngageDecantOrQtyCorrection() {\n  const scanLpnNavState = useHandlePageRefresh<ScanLpnNavState>();\n  const navigate = useNavigate();\n  const { setAlerts } = useContext(AlertContext);\n  const [containerId, setContainerId] = useState(\"\");\n\n  const isReEngageDecantFlow = scanLpnNavState?.isReEngageDecantFlow || false;\n\n  const getLpnDataSuccess = useCallback(\n    (response: AxiosResponse) => {\n      setAlerts({ success: \"LPN found\" });\n\n      // navigate to scan upc page with data as state\n      appLogger.action(\n        \"restart-decant-or-qty-correction: navigate to breakpack page\"\n      );\n      if (isReEngageDecantFlow) {\n        navigate(\"/breakpack\", {\n          state: {\n            ...scanLpnNavState,\n            trackingId: response.data.trackingId,\n          },\n        });\n      } else {\n        navigate(\"/update-item-quantity\", {\n          state: {\n            containerId: containerId,\n            containerInfo: response.data,\n          },\n        });\n      }\n    },\n    [setAlerts, navigate, isReEngageDecantFlow, containerId, scanLpnNavState]\n  );\n\n  const getLpnDataError = useCallback(\n    (error: AxiosError<any>) => {\n      setAlerts({\n        error:\n          error?.response?.data?.errorMessage ||\n          error?.message ||\n          \"Restart Decant error\",\n      });\n    },\n    [setAlerts]\n  );\n\n  const { mutate: receiveContainerId } = useMutation(getContainerDetails, {\n    onSuccess: (response) => getLpnDataSuccess(response as AxiosResponse),\n    onError: (error) => getLpnDataError(error as AxiosError<any>),\n  });\n\n  const onSumbitButton = useCallback(() => {\n    setAlerts({ loading: true });\n    receiveContainerId({\n      trackingId: containerId,\n      isReEngageDecantFlow: isReEngageDecantFlow,\n    });\n  }, [setAlerts, containerId, receiveContainerId, isReEngageDecantFlow]);\n\n  const onBarcodeScanned = (value: string) => {\n    appLogger.action(\n      `restart-decant-or-qty-correction: entered/scanned ${value} lpn`\n    );\n    setAlerts({ loading: true });\n    receiveContainerId({\n      trackingId: value,\n      isReEngageDecantFlow: isReEngageDecantFlow,\n    });\n  };\n\n  useScannedEventListener((event) => {\n    const parsed = event.detail.parsed.get(\"1D\");\n    if (parsed) {\n      onBarcodeScanned(parsed);\n    } else {\n      setAlerts({\n        error: `Unexpected barcode scanned ${event.detail.scanned}`,\n      });\n    }\n  });\n\n  useGlobalKeyboard({\n    disabled: true,\n  });\n\n  const onBackClick = useCallback(() => {\n    appLogger.action(\"restart-decant-or-qty-correction: Back button clicked\");\n    navigate(-1);\n  }, [navigate]);\n\n  const onChangeQty = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const val = event.target.value;\n      setContainerId(val);\n    },\n    [setContainerId]\n  );\n\n  return (\n    <>\n      <SubHeader\n        icon={\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n            disabled\n          >\n            <Barcode />\n          </IconButton>\n        }\n        title={\n          isReEngageDecantFlow\n            ? \"Restart Decant: Scan or Enter Container LPN\"\n            : \"Scan LPN or Enter Manually\"\n        }\n        actions={[\n          <Button\n            variant=\"contained\"\n            key=\"receive\"\n            size=\"large\"\n            sx={styles.button}\n            disabled={!containerId.trim() || containerId.length !== 25}\n            onClick={onSumbitButton}\n          >\n            Submit\n          </Button>,\n        ]}\n        enableBack\n        onClickBack={onBackClick}\n      />\n      <FormControl sx={{ m: 2, mt: 0, width: [\"100%\", \"30ch\"] }}>\n        <p>\n          <b>LPN</b>\n        </p>\n        <TextField\n          id=\"LPN\"\n          type=\"string\"\n          error={containerId.trim().length !== 0 && containerId.length !== 25}\n          helperText={\n            containerId.trim().length !== 0 && containerId.length !== 25\n              ? \"Please enter 25 digit valid LPN\"\n              : \"\"\n          }\n          value={containerId}\n          onChange={onChangeQty}\n        />\n      </FormControl>\n    </>\n  );\n}\n"],"names":["SubHeader","title","icon","chip","enableBack","onClickBack","actions","navigate","useNavigate","onClickBackButton","useCallback","sx","styles","size","edge","color","mr","onClick","fontSize","variant","component","GlobalKeyboard","inputLabel","onConfirm","useContext","KeyboardContext","keyboard","setKeyboard","onClickConfirm","value","appLogger","open","useGlobalKeyboard","onClickGlobalKeyboardConfirm","disabled","deps","onGlobalKeyboardConfirm","useEffect","children","button","borderRadius","fontWeight","m","getContainerDetails","request","axiosRequest","apiHandler","trackingId","isReEngageDecantFlow","description","ReEngageDecantOrQtyCorrection","scanLpnNavState","useHandlePageRefresh","setAlerts","AlertContext","useState","containerId","setContainerId","getLpnDataSuccess","response","success","state","data","containerInfo","getLpnDataError","error","errorMessage","message","receiveContainerId","useMutation","onSuccess","onError","mutate","onSumbitButton","loading","useScannedEventListener","event","parsed","detail","get","scanned","onBackClick","onChangeQty","val","target","IconButton","Button","trim","length","FormControl","mt","width","TextField","id","type","helperText","onChange"],"sourceRoot":""}